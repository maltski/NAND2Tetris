class UserCar {
    field int x, y, lane, speed;

    constructor UserCar new(int posx, int posy) {
        let lane = 3;
        let speed = 1;
        let x = posx;
        let y = posy;
        return this;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method int getX() { return x; }
    method int getY() { return y; }
    method int getLane() { return lane; }
    method int getSpeed() { return speed; }

    method void moveLeft() {
        if (lane > 1) {
            do hide();
            let lane = lane - 1;
            let x = x - 32; // reduce by the width of a lane
            do show();
        }
        return;
    }

    method void moveRight() {
        if (lane < 4) {
            do hide();
            let lane = lane + 1;
            let x = x + 32; // increase by the width of a lane
            do show();
        }
        return;
    }

    method void accelerate() {
        if (speed < 7) { let speed = speed + 1; }
        return;
    }

    method void brake() {
        if (speed > 1) { let speed = speed - 1; }
        return;
    }

    method void handleInput(char key) {
        if (key = 130) { do moveLeft(); } // Left-arrow
        if (key = 132) { do moveRight(); } // Right-arrow
        if (key = 131) { do accelerate(); } // Up-arrow
        if (key = 133) { do brake(); } // Down-arrow
        return;
    }

    method void show() {
        var int loc;
        let loc = (x / 16) + (y * 32); // Adapting the coordinates to the Memory.poke function
        do Screen.setColor(true);
        do drawUserCar(loc);
        return;
    }

    method void hide() {
        var int loc;
        let loc = (x / 16) + (y * 32);
        do Screen.setColor(true);
        do clearUserCar(loc);
        return;
    }

    method void drawUserCar(int location) {
        var int memAddress;
		let memAddress = 16384 + location;
		do Memory.poke(memAddress + 0, 4080);
		do Memory.poke(memAddress + 32, 7128);
		do Memory.poke(memAddress + 64, 8184);
		do Memory.poke(memAddress + 96, 8184);
		do Memory.poke(memAddress + 128, 8184);
		do Memory.poke(memAddress + 160, 6168);
		do Memory.poke(memAddress + 192, 15420);
		do Memory.poke(memAddress + 224, 6120);
		do Memory.poke(memAddress + 256, 6120);
		do Memory.poke(memAddress + 288, 6120);
		do Memory.poke(memAddress + 320, 6120);
		do Memory.poke(memAddress + 352, 8184);
		do Memory.poke(memAddress + 384, 6168);
		do Memory.poke(memAddress + 416, 6552);
		do Memory.poke(memAddress + 448, 8184);
		do Memory.poke(memAddress + 480, 4080);
		return;
    }

    method void clearUserCar(int location) {
        var int memAddress;
        let memAddress = 16384 + location;
        // Write white values to the memory (all 0s or appropriate white pixel values)
        do Memory.poke(memAddress + 0, 0);
        do Memory.poke(memAddress + 32, 0);
        do Memory.poke(memAddress + 64, 0);
        do Memory.poke(memAddress + 96, 0);
        do Memory.poke(memAddress + 128, 0);
        do Memory.poke(memAddress + 160, 0);
        do Memory.poke(memAddress + 192, 0);
        do Memory.poke(memAddress + 224, 0);
        do Memory.poke(memAddress + 256, 0);
        do Memory.poke(memAddress + 288, 0);
        do Memory.poke(memAddress + 320, 0);
        do Memory.poke(memAddress + 352, 0);
        do Memory.poke(memAddress + 384, 0);
        do Memory.poke(memAddress + 416, 0);
        do Memory.poke(memAddress + 448, 0);
        do Memory.poke(memAddress + 480, 0);        
        return;
    }
}